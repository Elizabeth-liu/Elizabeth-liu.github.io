(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{195:function(t,a,s){"use strict";s.r(a);var n=s(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"从输入url到页面加载的过程？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从输入url到页面加载的过程？","aria-hidden":"true"}},[t._v("#")]),t._v(" 从输入URL到页面加载的过程？")]),t._v(" "),s("h2",{attrs:{id:"浏览器接收url到开启网络请求线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器接收url到开启网络请求线程","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器接收url到开启网络请求线程")]),t._v(" "),s("h3",{attrs:{id:"多进程的浏览器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多进程的浏览器","aria-hidden":"true"}},[t._v("#")]),t._v(" 多进程的浏览器")]),t._v(" "),s("p",[t._v("浏览器是多进程的，有一个主控进程，以及每一个tab页面都会新开一个进程（某些情况下多个tab会合并进程）")]),t._v(" "),s("p",[t._v("进程可能包括主控进程，插件进程，GPU，tab页（浏览器内核）等等")]),t._v(" "),s("p",[t._v("Browser进程：浏览器的主进程（负责协调、主控），只有一个\n第三方插件进程：每种类型的插件对应一个进程，仅当使用该插件时才创建\nGPU进程：最多一个，用于3D绘制\n浏览器渲染进程（内核）：默认每个Tab页面一个进程，互不影响，控制页面渲染，脚本执行，事件处理等（有时候会优化，如多个空白tab会合并成一个进程）")]),t._v(" "),s("h3",{attrs:{id:"多线程的浏览器内核"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多线程的浏览器内核","aria-hidden":"true"}},[t._v("#")]),t._v(" 多线程的浏览器内核")]),t._v(" "),s("p",[t._v("每一个tab页面可以看作是浏览器内核进程，然后这个进程是多线程的，它有几大类子线程")]),t._v(" "),s("p",[t._v("GUI线程\nJS引擎线程\n事件触发线程\n定时器线程\n网络请求线程")]),t._v(" "),s("h3",{attrs:{id:"解析url"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析url","aria-hidden":"true"}},[t._v("#")]),t._v(" 解析URL")]),t._v(" "),s("p",[t._v("输入URL后，会进行解析（URL的本质就是统一资源定位符）")]),t._v(" "),s("p",[t._v("URL一般包括几大部分：")]),t._v(" "),s("p",[t._v("protocol，协议头，譬如有http，ftp等\nhost，主机域名或IP地址\nport，端口号\npath，目录路径\nquery，即查询参数\nfragment，即#后的hash值，一般用来定位到某个位置\n网络请求都是单独的线程\n每次网络请求时都需要开辟单独的线程进行，譬如如果URL解析到http协议，就会新建一个网络线程去处理资源下载")]),t._v(" "),s("p",[t._v("因此浏览器会根据解析出得协议，开辟一个网络线程，前往请求资源（这里，暂时理解为是浏览器内核开辟的，如有错误，后续修复）")]),t._v(" "),s("h2",{attrs:{id:"开启网络线程到发出一个完整的http请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#开启网络线程到发出一个完整的http请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 开启网络线程到发出一个完整的http请求")]),t._v(" "),s("h3",{attrs:{id:"dns查询得到ip"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dns查询得到ip","aria-hidden":"true"}},[t._v("#")]),t._v(" DNS查询得到IP")]),t._v(" "),s("p",[t._v("如果输入的是域名，需要进行dns解析成IP，大致流程：")]),t._v(" "),s("p",[t._v("如果浏览器有缓存，直接使用浏览器缓存，否则使用本机缓存，再没有的话就是用host\n如果本地没有，就向dns域名服务器查询（当然，中间可能还会经过路由，也有缓存等），查询到对应的IP\n注意，域名查询时有可能是经过了CDN调度器的（如果有cdn存储功能的话）")]),t._v(" "),s("p",[t._v("而且，需要知道dns解析是很耗时的，因此如果解析域名过多，会让首屏加载变得过慢，可以考虑dns-prefetch优化")]),t._v(" "),s("h3",{attrs:{id:"tcp-ip请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip请求","aria-hidden":"true"}},[t._v("#")]),t._v(" tcp/ip请求")]),t._v(" "),s("p",[t._v("http的本质就是tcp/ip请求")]),t._v(" "),s("p",[t._v("需要了解3次握手规则建立连接以及断开连接时的四次挥手")]),t._v(" "),s("p",[t._v("tcp将http长报文划分为短报文，通过三次握手与服务端建立连接，进行可靠传输")]),t._v(" "),s("h4",{attrs:{id:"五层因特网协议栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五层因特网协议栈","aria-hidden":"true"}},[t._v("#")]),t._v(" 五层因特网协议栈")]),t._v(" "),s("p",[t._v("1.应用层(dns,http) DNS解析成IP并发送http请求")]),t._v(" "),s("p",[t._v("2.传输层(tcp,udp) 建立tcp连接（三次握手）")]),t._v(" "),s("p",[t._v("3.网络层(IP,ARP) IP寻址")]),t._v(" "),s("p",[t._v("4.数据链路层(PPP) 封装成帧")]),t._v(" "),s("p",[t._v("5.物理层(利用物理介质传输比特流) 物理传输（然后传输的时候通过双绞线，电磁波等各种介质）\nOSI七层框架：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层")]),t._v(" "),s("p",[t._v("表示层：主要处理两个通信系统中交换信息的表示方式，包括数据格式交换，数据加密与解密，数据压缩与终端类型转换等")]),t._v(" "),s("p",[t._v("会话层：它具体管理不同用户和进程之间的对话，如控制登陆和注销过程")]),t._v(" "),s("h2",{attrs:{id:"从服务器接收到请求到对应后台接收到请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从服务器接收到请求到对应后台接收到请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 从服务器接收到请求到对应后台接收到请求")]),t._v(" "),s("h3",{attrs:{id:"负载均衡"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡","aria-hidden":"true"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),s("p",[t._v("用户发起的请求都指向调度服务器（反向代理服务器，譬如安装了nginx控制负载均衡），然后调度服务器根据实际的调度算法，分配不同的请求给对应集群中的服务器执行，然后调度器等待实际服务器的HTTP响应，并将它反馈给用户")]),t._v(" "),s("h3",{attrs:{id:"后台的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后台的处理","aria-hidden":"true"}},[t._v("#")]),t._v(" 后台的处理")]),t._v(" "),s("p",[t._v("一般后台都是部署到容器中的，所以一般为：")]),t._v(" "),s("p",[t._v("先是容器接受到请求（如tomcat容器）\n然后对应容器中的后台程序接收到请求（如java程序）\n然后就是后台会有自己的统一处理，处理完后响应响应结果")]),t._v(" "),s("h2",{attrs:{id:"后台和前台的http交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#后台和前台的http交互","aria-hidden":"true"}},[t._v("#")]),t._v(" 后台和前台的http交互")]),t._v(" "),s("h3",{attrs:{id:"状态码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态码","aria-hidden":"true"}},[t._v("#")]),t._v(" 状态码")]),t._v(" "),s("p",[t._v("200——表明该请求被成功地完成，所请求的资源发送回客户端\n304——自从上次请求后，请求的网页未修改过，请客户端使用本地缓存\n400——客户端请求有错（譬如可以是安全模块拦截）\n401——请求未经授权\n403——禁止访问（譬如可以是未登录时禁止）\n404——资源未找到\n500——服务器内部错误\n503——服务不可用\n...\n再列举下大致不同范围状态的意义")]),t._v(" "),s("p",[t._v("1xx——指示信息，表示请求已接收，继续处理\n2xx——成功，表示请求已被成功接收、理解、接受\n3xx——重定向，要完成请求必须进行更进一步的操作\n4xx——客户端错误，请求有语法错误或请求无法实现\n5xx——服务器端错误，服务器未能实现合法的请求")]),t._v(" "),s("h3",{attrs:{id:"请求头"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#请求头","aria-hidden":"true"}},[t._v("#")]),t._v(" 请求头")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-626730a88ec4c6a66738d6fba41a09b1_hd.jpg",alt:"请求头"}})]),t._v(" "),s("h3",{attrs:{id:"cookie"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cookie","aria-hidden":"true"}},[t._v("#")]),t._v(" cookie")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-e88c18ad8f8469688596c86504267c4b_hd.jpg",alt:"cookie"}})]),t._v(" "),s("h3",{attrs:{id:"长连接与短连接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#长连接与短连接","aria-hidden":"true"}},[t._v("#")]),t._v(" 长连接与短连接")]),t._v(" "),s("p",[t._v("首先看tcp/ip层面的定义：")]),t._v(" "),s("p",[t._v("长连接：一个tcp/ip连接上可以连续发送多个数据包，在tcp连接保持期间，如果没有数据包发送，需要双方发检测包以维持此连接，一般需要自己做在线维持（类似于心跳包）\n短连接：通信双方有数据交互时，就建立一个tcp连接，数据发送完成后，则断开此tcp连接\n然后在http层面：")]),t._v(" "),s("p",[t._v("http1.0中，默认使用的是短连接，也就是说，浏览器没进行一次http操作，就建立一次连接，任务结束就中断连接，譬如每一个静态资源请求时都是一个单独的连接\nhttp1.1起，默认使用长连接，使用长连接会有这一行Connection: keep-alive，在长连接的情况下，当一个网页打开完成后，客户端和服务端之间用于传输http的tcp连接不会关闭，如果客户端再次访问这个服务器的页面，会继续使用这一条已经建立的连接\n注意： keep-alive不会永远保持，它有一个持续时间，一般在服务器中配置（如apache），另外长连接需要客户端和服务器都支持时才有效")]),t._v(" "),s("h3",{attrs:{id:"http2-0"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-0","aria-hidden":"true"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),s("p",[t._v("多路复用（即一个tcp/ip连接可以请求多个资源）\n首部压缩（http头部压缩，减少体积）\n二进制分帧（在应用层跟传送层之间增加了一个二进制分帧层，改进传输性能，实现低延迟和高吞吐量）\n服务器端推送（服务端可以对客户端的一个请求发出多个响应，可以主动通知客户端）\n请求优先级（如果流被赋予了优先级，它就会基于这个优先级来处理，由服务器决定需要多少资源来处理该请求。）")]),t._v(" "),s("h3",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https","aria-hidden":"true"}},[t._v("#")]),t._v(" https")]),t._v(" "),s("p",[t._v("https就是安全版本的http，譬如一些支付等操作基本都是基于https的，因为http请求的安全系数太低了。")]),t._v(" "),s("p",[t._v("简单来看，https与http的区别就是： 在请求前，会建立ssl链接，确保接下来的通信都是加密的，无法被轻易截取分析")]),t._v(" "),s("p",[t._v("一般来说，如果要将网站升级成https，需要后端支持（后端需要申请证书等），然后https的开销也比http要大（因为需要额外建立安全链接以及加密等），所以一般来说http2.0配合https的体验更佳（因为http2.0更快了）")]),t._v(" "),s("p",[t._v("一般来说，主要关注的就是SSL/TLS的握手流程，如下（简述）：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token number"}},[t._v("1.")]),t._v(" 浏览器请求建立"),s("span",{attrs:{class:"token constant"}},[t._v("SSL")]),t._v("链接，并向服务端发送一个随机数–Client random和客户端支持的加密方法，比如"),s("span",{attrs:{class:"token constant"}},[t._v("RSA")]),t._v("加密，此时是明文传输。\n\n"),s("span",{attrs:{class:"token number"}},[t._v("2.")]),t._v(" 服务端从中选出一组加密算法与Hash算法，回复一个随机数–Server random，并将自己的身份信息以证书的形式发回给浏览器\n（证书里包含了网站地址，非对称加密的公钥，以及证书颁发机构等信息）\n\n"),s("span",{attrs:{class:"token number"}},[t._v("3.")]),t._v(" 浏览器收到服务端的证书后\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 验证证书的合法性（颁发机构是否合法，证书中包含的网址是否和正在访问的一样），如果证书信任，则浏览器会显示一个小锁头，否则会有提示\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 用户接收证书后（不管信不信任），浏览会生产新的随机数–Premaster secret，然后证书中的公钥以及指定的加密方法加密"),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`Premaster secret`")])]),t._v("，发送给服务器。\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 利用Client random、Server random和Premaster secret通过一定的算法生成"),s("span",{attrs:{class:"token constant"}},[t._v("HTTP")]),t._v("链接数据传输的对称加密key"),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`session key`")])]),t._v("\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用约定好的"),s("span",{attrs:{class:"token constant"}},[t._v("HASH")]),t._v("算法计算握手消息，并使用生成的"),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`session key`")])]),t._v("对消息进行加密，最后将之前生成的所有信息发送给服务端。\n\n"),s("span",{attrs:{class:"token number"}},[t._v("4.")]),t._v(" 服务端收到浏览器的回复\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 利用已知的加解密方式与自己的私钥进行解密，获取"),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`Premaster secret`")])]),t._v("\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 和浏览器相同规则生成"),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`session key`")])]),t._v("\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用"),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`session key`")])]),t._v("解密浏览器发来的握手消息，并验证Hash是否与浏览器发来的一致\n\n    "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" 使用"),s("span",{attrs:{class:"token template-string"}},[s("span",{attrs:{class:"token string"}},[t._v("`session key`")])]),t._v("加密一段握手消息，发送给浏览器\n\n"),s("span",{attrs:{class:"token number"}},[t._v("5.")]),t._v(" 浏览器解密并计算握手消息的"),s("span",{attrs:{class:"token constant"}},[t._v("HASH")]),t._v("，如果与服务端发来的"),s("span",{attrs:{class:"token constant"}},[t._v("HASH")]),t._v("一致，此时握手过程结束，\n之后所有的https通信数据将由之前\n")])])]),s("h2",{attrs:{id:"缓存问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存问题")]),t._v(" "),s("h3",{attrs:{id:"强缓存与弱缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#强缓存与弱缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 强缓存与弱缓存")]),t._v(" "),s("p",[t._v("缓存可以简单的划分成两种类型：强缓存（200 from cache）与协商缓存（304）")]),t._v(" "),s("p",[t._v("区别简述如下：")]),t._v(" "),s("p",[t._v("强缓存（200 from cache）时，浏览器如果判断本地缓存未过期，就直接使用，无需发起http请求\n协商缓存（304）时，浏览器会向服务端发起http请求，然后服务端告诉浏览器文件未改变，让浏览器使用本地缓存\n对于协商缓存，使用Ctrl + F5强制刷新可以使得缓存无效")]),t._v(" "),s("p",[t._v("但是对于强缓存，在未过期时，必须更新资源路径才能发起新的请求（更改了路径相当于是另一个资源了，这也是前端工程化中常用到的技巧）")]),t._v(" "),s("h3",{attrs:{id:"缓存头部简述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存头部简述","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓存头部简述")]),t._v(" "),s("p",[t._v("属于强缓存控制的：")]),t._v(" "),s("p",[t._v("（http1.1）Cache-Control/Max-Age\n（http1.0）Pragma/Expires\n注意：Max-Age不是一个头部，它是Cache-Control头部的值")]),t._v(" "),s("p",[t._v("属于协商缓存控制的：")]),t._v(" "),s("p",[t._v("（http1.1）If-None-Match/E-tag\n（http1.0）If-Modified-Since/Last-Modified\n可以看到，上述有提到http1.1和http1.0，这些不同的头部是属于不同http时期的")]),t._v(" "),s("p",[t._v("再提一点，其实HTML页面中也有一个meta标签可以控制缓存方案-Pragma")]),t._v(" "),s("h3",{attrs:{id:"头部的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#头部的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 头部的区别")]),t._v(" "),s("p",[t._v("首先明确，http的发展是从http1.0到http1.1")]),t._v(" "),s("p",[t._v("而在http1.1中，出了一些新内容，弥补了http1.0的不足。")]),t._v(" "),s("p",[t._v("http1.0中的缓存控制：")]),t._v(" "),s("p",[t._v("Pragma：严格来说，它不属于专门的缓存控制头部，但是它设置no-cache时可以让本地强缓存失效（属于编译控制，来实现特定的指令，主要是因为兼容http1.0，所以以前又被大量应用）\nExpires：服务端配置的，属于强缓存，用来控制在规定的时间之前，浏览器不会发出请求，而是直接使用本地缓存，注意，Expires一般对应服务器端时间，如Expires：Fri, 30 Oct 1998 14:19:41\nIf-Modified-Since/Last-Modified：这两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是If-Modified-Since，而服务端的是Last-Modified，它的作用是，在发起请求时，如果If-Modified-Since和Last-Modified匹配，那么代表服务器资源并未改变，因此服务端不会返回资源实体，而是只返回头部，通知浏览器可以使用本地缓存。Last-Modified，顾名思义，指的是文件最后的修改时间，而且只能精确到1s以内\nhttp1.1中的缓存控制：")]),t._v(" "),s("p",[t._v("Cache-Control：缓存控制头部，有no-cache、max-age等多种取值\nMax-Age：服务端配置的，用来控制强缓存，在规定的时间之内，浏览器无需发出请求，直接使用本地缓存，注意，Max-Age是Cache-Control头部的值，不是独立的头部，譬如Cache-Control: max-age=3600，而且它值得是绝对时间，由浏览器自己计算\nIf-None-Match/E-tag：这两个是成对出现的，属于协商缓存的内容，其中浏览器的头部是If-None-Match，而服务端的是E-tag，同样，发出请求后，如果If-None-Match和E-tag匹配，则代表内容未变，通知浏览器使用本地缓存，和Last-Modified不同，E-tag更精确，它是类似于指纹一样的东西，基于FileEtag INode Mtime Size生成，也就是说，只要文件变，指纹就会变，而且没有1s精确度的限制。\nMax-Age相比Expires？")]),t._v(" "),s("p",[t._v("Expires使用的是服务器端的时间")]),t._v(" "),s("p",[t._v("但是有时候会有这样一种情况-客户端时间和服务端不同步")]),t._v(" "),s("p",[t._v("那这样，可能就会出问题了，造成了浏览器本地的缓存无用或者一直无法过期")]),t._v(" "),s("p",[t._v("所以一般http1.1后不推荐使用Expires")]),t._v(" "),s("p",[t._v("而Max-Age使用的是客户端本地时间的计算，因此不会有这个问题")]),t._v(" "),s("p",[t._v("因此推荐使用Max-Age。")]),t._v(" "),s("p",[t._v("注意，如果同时启用了Cache-Control与Expires，Cache-Control优先级高。")]),t._v(" "),s("p",[t._v("E-tag相比Last-Modified？")]),t._v(" "),s("p",[t._v("Last-Modified：")]),t._v(" "),s("p",[t._v("表明服务端的文件最后何时改变的\n它有一个缺陷就是只能精确到1s，\n然后还有一个问题就是有的服务端的文件会周期性的改变，导致缓存失效\n而E-tag：")]),t._v(" "),s("p",[t._v("是一种指纹机制，代表文件相关指纹\n只有文件变才会变，也只要文件变就会变，\n也没有精确时间的限制，只要文件一遍，立马E-tag就不一样了\n如果同时带有E-tag和Last-Modified，服务端会优先检查E-tag")]),t._v(" "),s("p",[t._v("各大缓存头部的整体关系如下图\n"),s("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-c7562f5345c992e993623e378e685bde_hd.jpg",alt:"缓存"}})]),t._v(" "),s("h2",{attrs:{id:"解析页面流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析页面流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 解析页面流程")]),t._v(" "),s("h3",{attrs:{id:"流程简述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程简述","aria-hidden":"true"}},[t._v("#")]),t._v(" 流程简述")]),t._v(" "),s("p",[t._v("浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token number"}},[t._v("1.")]),t._v(" 解析"),s("span",{attrs:{class:"token constant"}},[t._v("HTML")]),t._v("，构建"),s("span",{attrs:{class:"token constant"}},[t._v("DOM")]),t._v("树\n\n"),s("span",{attrs:{class:"token number"}},[t._v("2.")]),t._v(" 解析"),s("span",{attrs:{class:"token constant"}},[t._v("CSS")]),t._v("，生成"),s("span",{attrs:{class:"token constant"}},[t._v("CSS")]),t._v("规则树\n\n"),s("span",{attrs:{class:"token number"}},[t._v("3.")]),t._v(" 合并"),s("span",{attrs:{class:"token constant"}},[t._v("DOM")]),t._v("树和"),s("span",{attrs:{class:"token constant"}},[t._v("CSS")]),t._v("规则，生成render树\n\n"),s("span",{attrs:{class:"token number"}},[t._v("4.")]),t._v(" 布局render树（Layout"),s("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("reflow），负责各元素尺寸、位置的计算\n\n"),s("span",{attrs:{class:"token number"}},[t._v("5.")]),t._v(" 绘制render树（paint），绘制页面像素信息\n\n"),s("span",{attrs:{class:"token number"}},[t._v("6.")]),t._v(" 浏览器会将各层的信息发送给"),s("span",{attrs:{class:"token constant"}},[t._v("GPU")]),t._v("，"),s("span",{attrs:{class:"token constant"}},[t._v("GPU")]),t._v("会将各层合成（composite），显示在屏幕上\n")])])]),s("p",[s("img",{attrs:{src:"https://pic3.zhimg.com/80/v2-2a7db99cc39992e3c605926b37939042_hd.jpg",alt:"流程"}})]),t._v(" "),s("p",[t._v("解析HTML到构建出DOM的过程可以简述如下：")]),t._v(" "),s("p",[t._v("Bytes → characters → tokens → nodes → DOM")]),t._v(" "),s("p",[t._v("资源外链的下载\n上面介绍了html解析，渲染流程。但实际上，在解析html时，会遇到一些资源连接，此时就需要进行单独处理了")]),t._v(" "),s("p",[t._v("简单起见，这里将遇到的静态资源分为一下几大类（未列举所有）：")]),t._v(" "),s("p",[t._v("CSS样式资源\nJS脚本资源\nimg图片类资源\n遇到外链时的处理")]),t._v(" "),s("p",[t._v("当遇到上述的外链时，会单独开启一个下载线程去下载资源（http1.1中是每一个资源的下载都要开启一个http请求，对应一个tcp/ip链接）")]),t._v(" "),s("p",[t._v("遇到CSS样式资源")]),t._v(" "),s("p",[t._v("CSS资源的处理有几个特点：")]),t._v(" "),s("p",[t._v("CSS下载时异步，不会阻塞浏览器构建DOM树\n但是会阻塞渲染，也就是在构建render时，会等到css下载解析完毕后才进行（这点与浏览器优化有关，防止css规则不断改变，避免了重复的构建）\n有例外，media query声明的CSS是不会阻塞渲染的\n遇到JS脚本资源")]),t._v(" "),s("p",[t._v("JS脚本资源的处理有几个特点：")]),t._v(" "),s("p",[t._v("阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析HTML\n浏览器的优化，一般现代浏览器有优化，在脚本阻塞时，也会继续下载其它资源（当然有并发上限），但是虽然脚本可以并行下载，解析过程仍然是阻塞的，也就是说必须这个脚本执行完毕后才会接下来的解析，并行下载只是一种优化而已\ndefer与async，普通的脚本是会阻塞浏览器解析的，但是可以加上defer或async属性，这样脚本就变成异步了，可以等到解析完毕后再执行\n注意，defer和async是有区别的： defer是延迟执行，而async是异步执行。")]),t._v(" "),s("p",[t._v("简单的说（不展开）：")]),t._v(" "),s("p",[t._v("async是异步执行，异步下载完毕后就会执行，不确保执行顺序，一定在onload前，但不确定在DOMContentLoaded事件的前或后\ndefer是延迟执行，在浏览器看起来的效果像是将脚本放在了body后面一样（虽然按规范应该是在DOMContentLoaded事件前，但实际上不同浏览器的优化效果不一样，也有可能在它后面）\n遇到img图片类资源")]),t._v(" "),s("p",[t._v("遇到图片等资源时，直接就是异步下载，不会阻塞解析，下载完毕后直接用图片替换原有src的地方")]),t._v(" "),s("p",[t._v("loaded和domcontentloaded\n简单的对比：")]),t._v(" "),s("p",[t._v("DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片(譬如如果有async加载的脚本就不一定完成)\nload 事件触发时，页面上所有的DOM，样式表，脚本，图片都已经加载完成了")]),t._v(" "),s("h2",{attrs:{id:"参照"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参照","aria-hidden":"true"}},[t._v("#")]),t._v(" 参照")]),t._v(" "),s("p",[t._v("https://zhuanlan.zhihu.com/p/34453198")])])}],!1,null,null,null);e.options.__file="cache.md";a.default=e.exports}}]);