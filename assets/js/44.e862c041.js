(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{213:function(a,t,e){"use strict";e.r(t);var s=e(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"dva"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dva","aria-hidden":"true"}},[a._v("#")]),a._v(" dva")]),a._v(" "),e("p",[a._v("dva想提供一个基于业界react&redux最佳实践的业务框架，以解决用裸redux全家桶作为前端数据层带来的种种问题")]),a._v(" "),e("p",[a._v("编辑成本高，需要在reducer, saga, action之间来回切换")]),a._v(" "),e("p",[a._v("不便于组织业务模型（或者叫domain model）。比如我们写了一个userlist之后，要写一个productlist，需要复制很多文件。")]),a._v(" "),e("p",[a._v("saga书写太复杂，每监听一个action都需要走fork -> watcher -> worker的流程")]),a._v(" "),e("p",[a._v("redux entry书写麻烦，要完成store创建，中间件配置，路由初始化，Provider的store的绑定，saga的初始化")]),a._v(" "),e("h2",{attrs:{id:"依赖关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#依赖关系","aria-hidden":"true"}},[a._v("#")]),a._v(" 依赖关系")]),a._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[a._v("dva\n  react\n  react"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("dom\n  dva"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("core\n    redux\n    redux"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("saga\n  history\n  react"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("redux\n  react"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("router"),e("span",{attrs:{class:"token operator"}},[a._v("-")]),a._v("redux\n")])])]),e("h2",{attrs:{id:"实现思路"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实现思路","aria-hidden":"true"}},[a._v("#")]),a._v(" 实现思路")]),a._v(" "),e("p",[a._v("他最核心的是提供了app.model方法，用于把reducer, initialState, action, saga封装到一起")]),a._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{attrs:{class:"token keyword"}},[a._v("const")]),a._v(" model "),e("span",{attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),e("span",{attrs:{class:"token comment"}},[a._v("// 用作顶层state key，以及action前缀")]),a._v("\n    namespace\n    "),e("span",{attrs:{class:"token comment"}},[a._v("// module级初始state")]),a._v("\n    state\n    "),e("span",{attrs:{class:"token comment"}},[a._v("// 订阅其它数据源，如router change，window resize, key down/up...")]),a._v("\n    subscriptions\n    "),e("span",{attrs:{class:"token comment"}},[a._v("// redux-saga里的sagas")]),a._v("\n    effects\n    "),e("span",{attrs:{class:"token comment"}},[a._v("// redux里的reducer")]),a._v("\n    reducers\n"),e("span",{attrs:{class:"token punctuation"}},[a._v("}")]),e("span",{attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("dva-core实际所作的主要工作是从model配置得到reducers，worker sagas, states后，屏蔽接下来的一系列繁琐工作：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("接redux（组合state，组合reducer）")])]),a._v(" "),e("li",[e("p",[a._v("接redux-saga（完成redux-saga的fork -> watcher -> worker，并做好错误捕获）")])])]),a._v(" "),e("p",[a._v("除了core里最重要的两部分外，dva还做了一些事情：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("内置react-router-redux, history负责路由管理")])]),a._v(" "),e("li",[e("p",[a._v("粘上react-redux的connect，isomorphic-fetch等常用的东西")])]),a._v(" "),e("li",[e("p",[a._v("subscriptions锦上添花，给监听场外因素的代码提供一个容身之处")])]),a._v(" "),e("li",[e("p",[a._v("和react连接起来（用store连接react和redux，靠redux中间件机制把redux-saga拉进来一起玩）")])])]),a._v(" "),e("p",[a._v("到这里差不多封装好了，那么，下面开一些口子增加一点灵活性：")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("递出一堆钩子（effect/reducer/action/state级hook），让内部状态可读")])]),a._v(" "),e("li",[e("p",[a._v("提供全局错误处理方式，解决异步错误不可控的痛点")])]),a._v(" "),e("li",[e("p",[a._v("增强model管理（允许动态增删model）")])])])])}],!1,null,null,null);r.options.__file="dva.md";t.default=r.exports}}]);